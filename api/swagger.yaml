---
swagger: '2.0'
info:
  description: bintra API
  version: 1.0.0
  title: Binary Transparency  API
  # put the contact info for your development or API team
  contact:
    email: kai@kretschmann.consulting

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries
     in the 'Authorization' header.

# tags are used for organizing operations
tags:
  - name: user
    description: Operations available to regular users
  - name: admin
    description: Operations available to admin users

paths:
  /login:
    x-swagger-router-controller: "Admins"
    post:
      operationId: loginPost
      description: "Login for a particular role from db"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /package:
    put:
      x-swagger-router-controller: "Users"
      tags:
        - user
        - admin
      summary: validates package info
      operationId: validatePackage
      description: |
        Add new package entry or increment an existing one.
        Returns all existing name-version variants with their hash and counts
        values for further decision of the installer tool.
      produces:
        - application/json
      parameters:
        - in: query
          name: packageName
          description: package name from extracted meta info
          required: true
          type: string
        - in: query
          name: packageVersion
          description: package version from extracted meta info
          required: true
          type: string
        - in: query
          name: packageArch
          description: package architecture from extracted meta info
          required: true
          type: string
        - in: query
          name: packageHash
          description: SHA256 hash of downloaded file
          required: true
          type: string
      responses:
        200:
          description: |
            Single array entry with high count in best case,
            otherwise multiple entries with one high count and one or more
            faked ones to beware of.
          schema:
            type: array
            items:
              $ref: '#/definitions/PackageItem'
        400:
          description: bad input parameter(s)
    get:
      x-swagger-router-controller: "Users"
      tags:
        - user
        - admin
      summary: get data for a package
      operationId: listPackage
      description: |
        Return no match at all, a single match with a high count for good
        matches, or multiple matches with only one good and one or more
        faked entries.
      produces:
        - application/json
      parameters:
        - in: query
          name: packageName
          description: package name from extracted meta info
          required: true
          type: string
        - in: query
          name: packageVersion
          description: package version from extracted meta info
          required: true
          type: string
        - in: query
          name: packageArch
          description: package architecture from extracted meta info
          required: true
          type: string
      responses:
        200:
          description: single good result we hope
          schema:
            type: array
            items:
              $ref: '#/definitions/PackageVariants'
        400:
          description: bad input parameter(s)
    delete:
      x-swagger-router-controller: "Admins"
      tags:
        - admin
      summary: delete one package
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      operationId: deletePackage
      description: |
        Delete one entry
      parameters:
        - in: query
          name: packageName
          description: package name from extracted meta info
          required: true
          type: string
        - in: query
          name: packageVersion
          description: package version from extracted meta info
          required: true
          type: string
        - in: query
          name: packageHash
          description: SHA256 hash of downloaded file
          required: true
          type: string
        - in: query
          name: packageArch
          description: package architecture from extracted meta info
          required: true
          type: string
      responses:
        200:
          description: positive result we hope
        400:
          description: bad input parameter(s)
        403:
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /package/{id}:
    delete:
      x-swagger-router-controller: "Admins"
      tags:
        - admin
      summary: delete one package by ID
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      operationId: deletePackageById
      description: |
        Delete one entry
      parameters:
        - in: path
          name: id
          description: Package ID (24 hex chars)
          required: true
          type: string
          minLength: 24
          maxLength: 24
          pattern: '^[a-fA-F0-9]{24}$'
      responses:
        200:
          description: positive result we hope
        400:
          description: bad input parameter(s)
        403:
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /count:
    get:
      x-swagger-router-controller: "Users"
      tags:
        - user
        - admin
      summary: return number of all entries
      operationId: countPackage
      description: |
        By passing in the appropriate options, you can validate a
        package before installing it
      produces:
        - application/json
      responses:
        200:
          description: positive result we hope
          schema:
            $ref: '#/definitions/PackageCount'
        400:
          description: bad input parameter(s)
  /packages:
    get:
      x-swagger-router-controller: "Users"
      tags:
        - user
        - admin
      summary: return all entries
      operationId: listPackages
      description: |
        Get all package data
      produces:
        - application/json
      responses:
        200:
          description: positive result we hope
          schema:
            $ref: '#/definitions/PackageItem'
        400:
          description: bad input parameter(s)
    delete:
      x-swagger-router-controller: "Admins"
      tags:
        - admin
      summary: delete all packages
      operationId: cleanupPackages
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      description: |
        By passing in the appropriate options, you can validate a
        package before installing it
      responses:
        200:
          description: positive result we hope
        400:
          description: bad input parameter(s)
        403:
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /users:
    get:
      x-swagger-router-controller: "Admins"
      tags:
        - admin
      summary: return all entries
      operationId: listUsers
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      description: |
        Get all users data
      produces:
        - application/json
      responses:
        200:
          description: positive result we hope
          schema:
            $ref: '#/definitions/LoginItem'
        400:
          description: bad input parameter(s)
definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
  LoginItem:
    type: object
    required:
      - name
      - email
      - hash
      - tscreated
    properties:
      name:
        type: string
      email:
        type: string
      hash:
        type: string
      tscreated:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
  PackageItem:
    type: object
    required:
      - count
      - hash
      - name
      - version
      - arch
      - tscreated
    properties:
      hash:
        type: string
      name:
        type: string
      version:
        type: string
      arch:
        type: string
      count:
        type: integer
        example: 123
      tscreated:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
  PackageVariants:
    type: object
    required:
      - id
      - packageName
      - packageVersion
      - packageHash
      - packageArch
      - count
      - creationDate
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      packageName:
        type: string
      packageVersion:
        type: string
      packageArch:
        type: string
      packageHash:
        type: string
      count:
        type: integer
        example: 123
      creationDate:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
  PackageCount:
    type: object
    required:
      - count
    properties:
      count:
        type: integer
        example: 123
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string
basePath: /v1
