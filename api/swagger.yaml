---

openapi: 3.0.1

info:
  title: Binary Transparency  API
  description: bintra API
  contact:
    email: kai@kretschmann.consulting
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.1

servers:
  - url: https://api.bintra.directory/v1
  - url: http://192.168.0.249:8080/v1

tags:
  - name: default
    description: Operations for all with or without token
  - name: user
    description: Operations available to regular users and admins
  - name: admin
    description: Operations available only to admin users
  - name: api
    description: Operations for internal API use

paths:
  /login:
    post:
      tags:
        - default
      description: Login for a particular role from db
      operationId: loginPost
      x-swagger-router-controller: Admins
      requestBody:
        description: Login data as html form
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Token'
        403:
          description: Access Denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /package:
    get:
      tags:
        - default
      summary: get data for a package
      description: |
        Return no match at all, a single match with a high count for good
        matches, or multiple matches with only one good and one or more
        faked entries.
      operationId: listPackage
      x-swagger-router-controller: Users
      parameters:
        - name: packageName
          in: query
          description: package name from extracted meta info
          required: true
          schema:
            type: string
        - name: packageVersion
          in: query
          description: package version from extracted meta info
          required: true
          schema:
            type: string
        - name: packageArch
          in: query
          description: package architecture from extracted meta info
          required: true
          schema:
            type: string
        - name: packageFamily
          in: query
          description: package Family, like debian, etc.
          required: true
          schema:
            type: string
      responses:
        200:
          description: single good result we hope
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageVariants'
        400:
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - user
      summary: validates package info
      description: |
        Add new package entry or increment an existing one.
        Returns all existing name-version variants with their hash and counts
        values for further decision of the installer tool.
        A valid token is required for this action.
      operationId: validatePackage
      x-swagger-router-controller: Users
      parameters:
        - name: packageName
          in: query
          description: package name from extracted meta info
          required: true
          schema:
            type: string
        - name: packageVersion
          in: query
          description: package version from extracted meta info
          required: true
          schema:
            type: string
        - name: packageArch
          in: query
          description: package architecture from extracted meta info
          required: true
          schema:
            type: string
        - name: packageFamily
          in: query
          description: package family, like debian, etc.
          required: true
          schema:
            type: string
            enum:
              - debian
        - name: packageHash
          in: query
          description: SHA256 hash of downloaded file
          required: true
          schema:
            type: string
      responses:
        200:
          description: |
            Single array entry with high count in best case,
            otherwise multiple entries with one high count and one or more
            faked ones to beware of.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageItem'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin
        - user

    delete:
      tags:
        - admin
      summary: delete one package
      description: |
        Delete one entry
      operationId: deletePackage
      x-swagger-router-controller: Admins
      parameters:
        - name: packageName
          in: query
          description: package name from extracted meta info
          required: true
          schema:
            type: string
        - name: packageVersion
          in: query
          description: package version from extracted meta info
          required: true
          schema:
            type: string
        - name: packageHash
          in: query
          description: SHA256 hash of downloaded file
          required: true
          schema:
            type: string
        - name: packageArch
          in: query
          description: package architecture from extracted meta info
          required: true
          schema:
            type: string
        - name: packageFamily
          in: query
          description: package family like debian, etc.
          required: true
          schema:
            type: string
            enum:
              - debian
      responses:
        200:
          description: positive result we hope
          content: {}
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Access Denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin

  /package/{id}:
    get:
      tags:
        - default
      summary: get data for a package
      description: |
        Return single package data
      operationId: listPackageSingle
      x-swagger-router-controller: Users
      parameters:
        - name: id
          in: path
          description: Package ID (24 hex chars)
          required: true
          schema:
            maxLength: 24
            minLength: 24
            pattern: ^[a-fA-F0-9]{24}$
            type: string
      responses:
        200:
          description: single good result we hope
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageVariants'
        400:
          $ref: '#/components/responses/BadRequest'

    delete:
      tags:
        - admin
      summary: delete one package by ID
      description: |
        Delete one entry
      operationId: deletePackageById
      x-swagger-router-controller: Admins
      parameters:
        - name: id
          in: path
          description: Package ID (24 hex chars)
          required: true
          schema:
            maxLength: 24
            minLength: 24
            pattern: ^[a-fA-F0-9]{24}$
            type: string
      responses:
        200:
          description: positive result we hope
          content: {}
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Access Denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin


  /count:
    get:
      tags:
        - api
      summary: return number of all entries
      description: |
        By passing in the appropriate options, you can validate a
        package before installing it
      operationId: countPackage
      x-swagger-router-controller: Users
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageCount'
        400:
          $ref: '#/components/responses/BadRequest'


  /packagesfull:
    get:
      tags:
        - admin
      summary: return all entries with all fields
      description: |
        Get all package data
      operationId: listPackagesFull
      x-swagger-router-controller: Users
      parameters:
        - name: count
          in: query
          description: Limit number of entries
          schema:
            type: number
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageItem'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin


  /packages:
    get:
      tags:
        - default
      summary: return all entries
      description: |
        Get all package data
      operationId: listPackages
      x-swagger-router-controller: Users
      parameters:
        - name: count
          in: query
          description: Limit number of entries
          schema:
            type: number
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageItem'
        400:
          $ref: '#/components/responses/BadRequest'

    delete:
      tags:
        - admin
      summary: delete all packages
      description: |
        By passing in the appropriate options, you can validate a
        package before installing it
      operationId: cleanupPackages
      x-swagger-router-controller: Admins
      responses:
        200:
          description: positive result we hope
          content: {}
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Access Denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin


  /test:
    get:
      tags:
        - default
      summary: check authentication
      description: |
        Some dummy function everyone can access
      operationId: testDefault
      x-swagger-router-controller: Users
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

    delete:
      tags:
        - api
      summary: check authentication
      description: |
        Some dummy function only admins can access
      operationId: testAdmin
      x-swagger-router-controller: Users
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin


  /user:
    get:
      tags:
        - admin
      summary: return all entries
      description: |
        Get all users data
      operationId: listUsers
      x-swagger-router-controller: Admins
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin

    post:
      tags:
        - api
      summary: create a user
      description: |
        Create a new user and prepare opt in steps
      operationId: createUser
      x-swagger-router-controller: Admins
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginItem'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin
        - api
      x-codegen-request-body-name: user


  /user/{id}:
    get:
      tags:
        - admin
      summary: return the entries
      description: |
        Get all user data
      operationId: listUser
      x-swagger-router-controller: Admins
      parameters:
        - name: id
          in: path
          description: Package ID (24 hex chars)
          required: true
          schema:
            maxLength: 24
            minLength: 24
            pattern: ^[a-fA-F0-9]{24}$
            type: string
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginItem'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin

    put:
      tags:
        - api
      summary: update user status
      description: |
        Update status of a single user for optin etc
      operationId: putUserStatus
      x-swagger-router-controller: Admins
      parameters:
        - name: id
          in: path
          description: Package ID (24 hex chars)
          required: true
          schema:
            maxLength: 24
            minLength: 24
            pattern: ^[a-fA-F0-9]{24}$
            type: string
        - name: status
          in: query
          description: New status enum value
          required: true
          schema:
            type: string
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginItem'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin
        - api

    delete:
      tags:
        - admin
      summary: delete the user
      description: |
        Deletes the user entry
      operationId: deleteUser
      x-swagger-router-controller: Admins
      parameters:
        - name: id
          in: path
          description: Package ID (24 hex chars)
          required: true
          schema:
            maxLength: 24
            minLength: 24
            pattern: ^[a-fA-F0-9]{24}$
            type: string
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginItem'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin

    patch:
      tags:
        - admin
      summary: update fields
      description: |
        Update fields for a user
      operationId: patchUser
      x-swagger-router-controller: Admins
      parameters:
        - name: id
          in: path
          description: Package ID (24 hex chars)
          required: true
          schema:
            maxLength: 24
            minLength: 24
            pattern: ^[a-fA-F0-9]{24}$
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchRequest'
        required: false
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginItem'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - admin
      x-codegen-request-body-name: jpatch


  /feed.{type}:
    get:
      tags:
        - default
      summary: Return feed of latest entries
      description: |
        Get all the latest entries in some RSS defined format type
      operationId: bintraFeed
      x-swagger-router-controller: Feeds
      parameters:
        - name: type
          in: path
          description: Type of feed
          required: true
          schema:
            type: string
            enum:
              - rss
              - atom
              - json
      responses:
        200:
          description: positive result we hope
          content:
            application/rss+xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          $ref: '#/components/responses/BadRequest'


  /token:
    get:
      tags:
        - user
      summary: Validate token and return information
      description: |
        Get meta data from valid JWT token like expiration date
      operationId: checkToken
      x-swagger-router-controller: Users
      responses:
        200:
          description: positive result we hope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenItem'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerauth: []
      x-security-scopes:
        - user


components:
  schemas:
    PatchRequest:
      type: array
      items:
        $ref: '#/components/schemas/PatchEntry'
    PatchEntry:
      required:
        - op
        - path
      type: object
      properties:
        op:
          type: string
          description: The operation
          enum:
            - add
            - remove
            - replace
            - move
            - copy
            - test
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: string
          description: The value to be used witzhin that operation
        from:
          type: string
          description: A string containing a JSON Pointer value
      description: A JSONPatch document as RFC 6902
    Registration:
      required:
        - email
        - password
        - username
      type: object
      properties:
        username:
          type: string
          example: username
        password:
          type: string
          format: password
          example: password
        email:
          type: string
          format: email
          example: me@example.com
    Authentication:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
          example: username
        password:
          type: string
          format: password
          example: password
    TokenItem:
      type: object
      properties:
        name:
          type: string
        tsfrom:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
        tsto:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/LoginItem'
    LoginItem:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        status:
          type: string
        tscreated:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
    PackageItem:
      required:
        - arch
        - count
        - family
        - hash
        - name
        - tscreated
        - version
      type: object
      properties:
        hash:
          type: string
        name:
          type: string
        version:
          type: string
        arch:
          type: string
        family:
          type: string
        count:
          type: integer
          example: 123
        tscreated:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
    PackageVariants:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        packageName:
          type: string
        packageVersion:
          type: string
        packageArch:
          type: string
        packageFamily:
          type: string
        packageHash:
          type: string
        count:
          type: integer
          example: 123
        creationDate:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
    PackageCount:
      required:
        - count
      type: object
      properties:
        count:
          type: integer
          example: 123
    Token:
      type: object
      properties:
        token:
          type: string
    Message:
      type: object
      properties:
        message:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request, some parameter must be wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerauth:
      type: http
      scheme: bearer
      bearerFormat: JWT
