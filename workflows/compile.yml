# bintra gitlab CI definition
# simple commit without tag, so test as hell

.myglobals:
  interruptible: true
  tags:
    - $RUNNERTAG

.sourcechanged:
  rules:
    - changes:
      - api/*
      - ./*.js
      - .eslintrc.js
      - .gitlab-ci.yml
      - package.json
      - package-lock.json
      - config/*.js
      - controllers/*.js
      - models/*.js
      - service/*.js
      - static/
      - subscribers/*.js
      - utils/*.js
      - worker/*.js
      - local/*.js
      - test/*.js
      - app.js
      - conf.js
      - setup_env_test.sh
      - workflows/*.yml

image: node:16
cache:
  paths:
    - node_modules/
variables:
  versionTag: "$CI_COMMIT_SHA"
  FF_NETWORK_PER_BUILD: 1
  NEXUS_URL_RPM: "https://nexus.myocastor.de/repository/bintra_rpm/"
  NEXUS_URL_DEB: "https://nexus.myocastor.de/repository/bintra/"

makedocs:
  extends:
    - .myglobals
  stage: build
  image: "$CI_REGISTRY/kai/lggr:mkdocs"
  before_script:
    - mkdir pub_mkdocs
  script:
    - mkdocs build
  artifacts:
    paths:
      - pub_mkdocs

jsdocs:
  extends:
    - .myglobals
  stage: build
  before_script:
    - npm install
  script:
    - "./node_modules/.bin/jsdoc --verbose -c jsdoc.json"
  artifacts:
    paths:
      - out

unittest:
  services:
    - name: mongo:5
      alias: mongocomp
    - name: redis:6
      alias: rediscomp
    - name: "$CI_REGISTRY/kgroup/bintra:mqtt"
      alias: mqttcomp
  extends:
    - .sourcechanged
    - .myglobals
  stage: test
  image: "$CI_REGISTRY/kgroup/bintra:fat"
  variables:
    NODE_ENV: test
  before_script:
    - df .
    - echo "Using parallel services suffix comp"
    - npm install
    - ping -c 3 mongocomp
    - ping -c 3 rediscomp
    - ping -c 3 mqttcomp
    - mongosh --host mongocomp <testutils/cleanup.js
    - echo "show dbs" | mongosh --host mongocomp
    - "./setup_env_test.sh -s comp"
  script:
    - npm run combined test/api_* test/server_adminsummary.js test/server_summary.js test/server_common.js test/server_admuser.js test/server_delpackage.js  test/server_feeds.js test/server_packages.js test/server_queue.js test/server_roles.js test/server_putpackage.js test/server_webfilter.js test/local_*
  after_script:
    - echo "show dbs" | mongosh --host mongocomp
    - df .
  coverage: "/Statements\\s+:\\s+(\\d+\\.\\d+)%/"
  allow_failure: false
  artifacts:
    when: always
    paths:
      - mochawesome-report/
      - coverage/
      - junit-custom.xml
      - xunit.xml
      - testlink.xml
    reports:
      junit: junit-custom.xml

lint:
  extends:
    - .sourcechanged
    - .myglobals
  stage: test
  variables:
    NODE_ENV: test
  script:
    - npm run lint >lint.txt
  allow_failure: true
  artifacts:
    when: always
    paths:
      - lint.txt

.zaptest:
  services:
    - name: mongo:5
      alias: mongozap
    - name: redis:6
      alias: rediszap
    - name: "$CI_REGISTRY/kgroup/bintra:mqtt"
      alias: mqttzap
    - name: owasp/zap2docker-bare
      alias: owaspzap
      command: ["zap.sh", "-daemon", "-silent", "-host", "0.0.0.0", "-port", "8080", "-config", "api.addrs.addr.name=.*", "-config", "api.addrs.addr.regex=true", "-config", "api.disablekey=true"]
  extends:
    - .sourcechanged
    - .myglobals
  stage: test
  image: "$CI_REGISTRY/kgroup/bintra:fat"
  variables:
    NODE_ENV: test
  needs: []
  before_script:
    - rm -rf node_modules/
    - npm install
    - npm install mocha -g
    - ping -c 3 mongozap
    - ping -c 3 redis_zap
    - ping -c 3 mqttzap
    - ping -c 3 owaspzap
    - mongosh --host mongozap <testutils/cleanup.js
    - echo "show dbs" | mongosh --host mongo_zap
    - "./setup_env_test.sh -s zap"
    - mkdir reports || true
  script:
    - export MYIP=$(hostname -i)
    - echo "Main IP $MYIP"
    - export HTTP_PROXY=owaspzap:8080
    - npm start >reports/server.log&
    - SERVERPID=$!
    - sleep 60
    - npx mocha test/network*
    - sleep 5
    - kill $SERVERPID
  after_script:
    - echo "show dbs" | mongosh --host mongozap
    - unset HTTP_PROXY
    - export ZAPIP=$(ping -c 1 owaspzap |head -1|cut -d' ' -f3|tr -d \(|tr -d \))
    - echo "Zap-IP $ZAPIP"
    - sleep 5
    - curl "http://$ZAPIP:8080/OTHER/core/other/htmlreport/" > reports/main.html
    - curl "http://$ZAPIP:8080/JSON/stats/view/allSitesStats/?keyPrefix=" > reports/all-sites-stats.json
    - curl "http://$ZAPIP:8080/JSON/alert/view/alerts/?baseurl=&start=&count=&riskId=" > reports/all-alerts.json
  allow_failure: true
  artifacts:
    when: always
    paths:
      - reports/

testlink:
  extends:
    - .sourcechanged
    - .myglobals
  stage: report
  image: python:3
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
    APIKEY: "${TESTLINK_APIKEY}"
    TPAPIKEY: "${TESTLINK_TESTPLAN_APIKEY}"
    COMMIT_ID: "${CI_COMMIT_SHA}"
    COMMIT_BRANCH: "${CI_COMMIT_BRANCH}"
    TESTLINK_HOST: "${TESTLINK_HOST}"
    TESTLINK_TESTPLANID: "${TESTLINK_TESTPLANID}"
    TESTLINK_PLATFORMID: "${TESTLINK_PLATFORMID}"
  needs: ["unittest"]
  before_script:
    - pip install --no-cache-dir requests
    - export TAGFULL=$(git describe)
    - export TAGSHORT=$(git describe --abbrev=0)
  script:
    - python tl2rest.py

bom:
  extends:
    - .sourcechanged
    - .myglobals
  stage: report
  variables:
    DTRACK_URL: ${DTRACK_URL}
    DTRACK_API: ${DTRACK_API}
    DTRACK_PROJECT: ${DTRACK_PROJECT}
    DTRACK_NAME: "bintra"
  before_script:
    - 'export DTRACK_VERSION=$(cut -d ":" -f 6 <VERSION.cpe)'
  script:
    - npm run sbom
  after_script:
    - echo "projectName=${DTRACK_NAME}"
    - echo "projectVersion=${DTRACK_VERSION}"
    - 'curl -X POST ${DTRACK_URL}api/v1/bom -H "Content-Type: multipart/form-data" -H "X-API-Key: ${DTRACK_API}" -F "autoCreate=true" -F "projectName=${DTRACK_NAME}" -F "projectVersion=${DTRACK_VERSION}" -F bom=@bom.json'
  allow_failure: true
  artifacts:
    paths:
      - bom.json

sonarqube:
  extends:
    - .sourcechanged
    - .myglobals
  stage: analyze
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint:
      - ''
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  needs: ["unittest"]
  before_script:
    - git fetch --unshallow
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.branch.name=${CI_COMMIT_REF_SLUG}
  allow_failure: false

sast:
  extends:
    - .sourcechanged
    - .myglobals
  stage: analyze

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

semgrep-sast:
  variables:
    SAST_EXCLUDED_PATHS: spec, test, tests, tmp, node_modules, documentation, pub_mkdocs, myoas, mochawesome-report, coverage, out

.secret-analyzer:
  extends:
    - .sourcechanged
    - .myglobals
  stage: analyze
